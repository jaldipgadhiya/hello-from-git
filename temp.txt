Cisco Systems (2001): Building and Sustaining a 
Customer-Centric Culture
Customer centricity has been an important part of the culture at Cisco Systems since its 
inception. While part of this is attributable to values put in place by the founders and retained 
by subsequent management, it is also closely interwoven with its organizational architecture 
that reaffirmed those values.
Until 2001, Cisco had a decentralized organizational structure with three business units 
organized around each of its three main customer types: Service Provider, Enterprise, and 
Commercial. Each unit developed and marketed a complete product line for its specific 
customer group, further reaffirming its belief in the centrality of distinct customers. 
A number of other systems, structures, and behavioral mechanisms reaffirmed the importance 
of customer centricity. The 2001 market downturn, however, brought new challenges as Cisco 
was forced to lay off 18% of its workforce and reexamine its organizational structure that was 
costly due to duplication of activities across each of the three customer-facing business units.
Ultimately, Cisco Systems decided to transform the company from a decentralized to 
centralized organization. While recognizing that a centralized, functional structure was 
necessary to avoid product and resource redundancies, it also threatened Cisco's customercentricity in that the centralization of R & D and marketing made them more distant from 
Cisco's customers. 
To overcome the perceived misalignment between its structure and culture, Cisco introduced a 
number of initiatives like the Customer Focus Initiative (CFI) to ensure that while the structure 
was turning away from customer centricity, the beliefs and actions of its employees maintained 
that focus. In doing so, management accepted the likely misalignment between its structure and 
culture and sought ways to compensate for this perceived gap

private static SSLContext getSSLSocketFactory(String keyStorePath, String keyStorePassword,
                                              String trustStorePath, String trustStorePassword) throws Exception {
    // Load client keystore
    KeyStore keyStore = KeyStore.getInstance(CLIENT_KEYSTORE_TYPE);
    try (InputStream keyInput = new FileInputStream(new File(keyStorePath))) {
        keyStore.load(keyInput, keyStorePassword.toCharArray());
    }
    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance("SunX509");
    keyManagerFactory.init(keyStore, keyStorePassword.toCharArray());

    // Load truststore
    KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
    try (InputStream trustInput = new FileInputStream(new File(trustStorePath))) {
        trustStore.load(trustInput, trustStorePassword.toCharArray());
    }
    TrustManagerFactory trustManagerFactory = 
            TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
    trustManagerFactory.init(trustStore);

    // Initialize SSLContext explicitly with TLSv1.2
    SSLContext context = SSLContext.getInstance("TLSv1.2");
    context.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), new SecureRandom());

    return context;
}


PUEJ7BT1Q7LPATGY

Z9K8Y1N4B7L3Q2X5

X5G7K2M9Q1L8Z4B6

ChatGPT o1-mini

You said:
Please write below statement in a different way to be reverted through an e-mail. As discussed, provided list of leads have already been assigned for tele calling and as per existing logic leads are being considered for tele calling once user redirects to digibanca platform and inactive for 5 minutes. If user drops the journey before or during redirection then in that case leads are not being considered for tele calling.

Additionally, please confirm further which approach to be finalized for tele calling if need to go with new approach through LMS and scrap the existing approach as per our last discussion then please raise a new call accordingly.  
ChatGPT

Thought for a couple of seconds
Subject: Confirmation on Telecalling Approach and Lead Assignment Process

Dear [Recipientâ€™s Name],

I hope this message finds you well.

As discussed, the provided list of leads has already been assigned for telecalling. According to our current logic, leads are eligible for telecalling when a user is redirected to the Digibanca platform and remains inactive for 5 minutes. If a user exits the journey before or during the redirection process, those leads will not be considered for telecalling.

Additionally, please confirm which approach we should finalize for telecalling. If we decide to implement the new approach through LMS and discontinue the existing method, as per our last discussion, kindly initiate a new request accordingly.

As discussed, provided list of leads have already been assigned for tele calling and as per existing logic leads are being considered for tele calling once user redirects to digibanca platform and inactive for 5 minutes. If user drops the journey before or during redirection then in that case leads are not being considered for tele calling.

Additionally, please confirm further which approach to be finalized for tele calling if need to go with new approach through LMS and scrap the existing approach as per our last discussion then please raise a new call accordingly.  


<Error while decrypting: javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher>

package com.bajajallianz.mph.utility;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;

import org.json.JSONObject;

import com.google.gson.Gson;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;

public class EncDecApiClass {
	
	EncDecReqResParameterPojo encDecReqResParameterPojo=null;
	JSONObject jsonObject = new JSONObject();
	String res="";
	Gson gson=new Gson();
	private static SecretKeySpec secretKey;
	  String secret="Z9K8Y1N4B7L3Q2X5";//"X5G7K2M9Q1L8Z4B6";//"PUEJ7BT1Q7LPATGY";
	  public String dec(String strToDecrypt)
	  {
	    try
	    {
	      setKey(secret);
	      Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
	      cipher.init(2, secretKey);

	      return new String(cipher.doFinal(DatatypeConverter.parseBase64Binary(strToDecrypt)));
	    }
	    catch (Exception e)
	    {
	      System.out.println("Error while decrypting: " + e.toString());
	    }
	    return null;
	  }

	  public String enc(String strToEncrypt)
	  {
		  String res="";
	    try {
	      setKey(secret);
	      Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
	      cipher.init(1, secretKey);
	      //return DatatypeConverter.printBase64Binary(cipher.doFinal(strToEncrypt.getBytes("UTF-8")));
	      
	      res = "{\"res\":\"" + DatatypeConverter.printBase64Binary(cipher.doFinal(strToEncrypt.getBytes("UTF-8"))) + "\"}";
	      return res;
	    }
	    catch (Exception e)
	    {
	      System.out.println("Error while encrypting: " + e.toString());
	    }
	    return null;
	  }
	public static void setKey(String myKey) {
	    try {
	      secretKey = new SecretKeySpec(myKey.toString().getBytes("UTF-8"), "AES");
	    }
	    catch (Exception e) {
	      e.printStackTrace();
	    }
	  }
	
}



https://us06web.zoom.us/j/85880108456?pwd=0aZ62rbMhk00ATZZMmx5tJPTVMDsnS.1

https://instalearn2.disprz.com/#!/module/51950/20229

error on POST request for "https://saksham.axisbank.co.in/gateway/api/rcm/v1/docupload": Unrecognized SSL message, plaintext connection?; nested exception is javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection?
2024-10-30 14:07:38,317 INFO c.b.a.s.FileUploadServiceInterfaceImpl [Thread-123] responseCode of Axis api:::>>>>null
2024-10-30 14:07:38,317 INFO c.b.a.s.FileUploadServiceInterfaceImpl [Thread-123] In Service Exception::>>>null
2024-10-30 14:07:38,317 INFO c.b.a.s.FileUploadServiceInterfaceImpl [Thread-123] EntrySet data::::>>>>||entrySet.getKey()::>>PROPOSAL FORM||entrySet.getValue():::>>6135602038_505775261_Proposal Form_PDF
2024-10-30 14:07:38,317 INFO c.b.a.r.RestClient [Thread-123] applNo::::>>>6135602038
leadId- by Jaldip Gadhiya/Pune HO/Technology/Life
18:14
Jaldip Gadhiya/Pune HO/Technology/Life
leadId-
Link https://saksham.axisbank by Jaldip Gadhiya/Pune HO/Technology/Life
18:19
Jaldip Gadhiya/Pune HO/Technology/Life
https://saksham.axisbank
Chaithanya Reddy/Pune HO/Technology/Life added Manish Dhole01(Outsource-Precision)/Pune HO/Technology/Life to the chat.
Chaithanya Reddy/Pune HO/Technology/Life added Manish Dhole01(Outsource-Precision)/Pune HO/Technology/Life to the chat.
Last read
2024-10-30 14:07:38,317 INFO c.b.a.r.RestCl... by Chaithanya Reddy/Pune HO/Technology/Life
Chaithanya Reddy/Pune HO/Technology/Life
18:30
2024-10-30 14:07:38,317 INFO c.b.a.r.RestClient [Thread-123] Inside Exception of UploadDocs API CallI/O error on POST request for "https://saksham.axisbank.co.in/gateway/api/rcm/v1/docupload": Unrecognized SSL message, plaintext connection?; nested exception is javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection?
2024-10-30 14:07:38,317 INFO c.b.a.s.FileUploadServiceInterfaceImpl [Thread-123] responseCode of Axis api:::>>>>null
2024-10-30 14:07:38,317 INFO c.b.a.s.FileUploadServiceInterfaceImpl [Thread-123] In Service Exception::>>>null
2024-10-30 14:07:38,317 INFO c.b.a.s.FileUploadServiceInterfaceImpl [Thread-123] EntrySet data::::>>>>||entrySet.getKey()::>>PROPOSAL FORM||entrySet.getValue():::>>6135602038_505775261_Proposal Form_PDF
2024-10-30 14:07:38,317 INFO c.b.a.r.RestClient [Thread-123] applNo::::>>>6135602038
source : 10.3.8.18 by Chaithanya Reddy/Pune HO/Technology/Life
Chaithanya Reddy/Pune HO/Technology/Life
18:30
source : 10.3.8.18
has context menu
New messa


private static SSLContext getSSLSocketFactory(String PFX_location, String PFX_Password) throws Exception {
		SSLContext context = null;
		File pKeyFile = new File(PFX_location);
		KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance("SunX509");
		KeyStore keyStore = KeyStore.getInstance(APIConstants.CLIENT_KEYSTORE_TYPE);
		InputStream keyInput = new FileInputStream(pKeyFile);
		keyStore.load(keyInput, PFX_Password.toCharArray());
		keyInput.close();
		keyManagerFactory.init(keyStore, PFX_Password.toCharArray());
		context = SSLContext.getInstance("TLS");
		context.init(keyManagerFactory.getKeyManagers(), null, new SecureRandom());
		return context;
	}

	// Axis file Upload API consume Call
	public static String uploadDocs(String base64String,String applNo, String policyNo, String leadNo, String docname, String uniqueValue, String docType, String extenstion) throws Exception {
		//System.out.println("base64::::"+base64String);
		System.out.println("extension:::::>>>>"+extenstion);
		log.info("extension:::::>>>>"+extenstion);
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd-MM-yyyy");
		LocalDateTime currentDate = LocalDateTime.now();
		System.out.println(dtf.format(currentDate));
		log.info(dtf.format(currentDate));
		if(leadNo ==null || leadNo.equalsIgnoreCase("null")) {
			leadNo = "";
		}
		
		if(policyNo == null || policyNo.equalsIgnoreCase("null")) {
			policyNo = "";
		}
		
			
		String request = "{\r\n" + 
				"  \"partnerName\": \"BALIC\",\r\n" + 
				"  \"channelName\": \"D2C\",\r\n" + 
				"  \"documentDetails\": {\r\n" + 
				"    \"leadId\": \""+leadNo+"\",\r\n" + 
				"    \"proposalNo\": \""+policyNo+"\",\r\n" + 
				"    \"applicationNo\": \""+applNo+"\",\r\n" + 
				"    \"policyNo\": \""+policyNo+"\",\r\n" + 
				"    \"memberId\": \"\",\r\n" + 
				"    \"docName\": \""+docname+"."+extenstion+"\",\r\n" + 
				"    \"docType\": \""+docType+"\",\r\n" + 
				"    \"docKey\": \"\",\r\n" + 
				"    \"docFile\": \""+base64String+"\",\r\n" + 
				"    \"docUrl\": \"\",\r\n" + 
				"    \"issuanceDt\": \""+dtf.format(currentDate)+"\"\r\n" + 
				"  }\r\n" + 
				"}";
		
		DateTimeFormatter dtf1 = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
		LocalDateTime nowReq = LocalDateTime.now();
		String reqTime = (dtf1.format(nowReq)).toString();
	
		// Column Names APP_NO,POLICY_NO,DOC_NAME,REQUEST,REQUEST_TIME,FIELD1,FIELD2,FIELD3,FIELD4,FIELD5,CREATE_DATE,CREATE_USER
		//DAO call for request storing
		AxisFileUploadDao dao = new AxisFileUploadDao();
		//Removed Request Due DB Limit exceeding
		String resp = dao.saveReqAnddRespDetails(applNo, policyNo, docname+"."+extenstion, "null", reqTime);
		System.out.println("Resp of save data::>>" + resp);
		log.info("Resp of save data::>>" + resp);
		System.out.println("AXIS Record Mangement Req of::>>" + resp);
		System.out.println("leadId-"+leadNo+"~proposalNo-"+policyNo+"~applicationNo-"+applNo+"~policyNo-"+policyNo+"~docName-"+docname+"."+extenstion+"~docType-"+docType+"docFileLength-"+base64String.length()+"~issuanceDt-"+dtf.format(currentDate));
		//Encrypting request payload
		String encryptedRequest  = AxisEncryptionDecryption.axisFileUploadEncryption(FileUploadStringConstants.BALIC_E2E_SECRET_KEY, request);
		
		String encryptedRequestPayload = "{\r\n" + 
				"  \"payload\": \""+encryptedRequest+"\"\r\n" + 
				"}";
		
		System.out.println("Inside the Axis file Upload API consume Method Call");
		
		SSLContext context = getSSLSocketFactory(APIConstants.CLIENT_KEYSTORE_PATH, APIConstants.CLIENT_KEYSTORE_PASS);
		// SSLSocketFactory sockFact = context.getSocketFactory();
		HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();
		HttpClient client = HttpClients.custom().setSSLContext(context).build();
		requestFactory.setHttpClient(client);
		requestFactory.setBufferRequestBody(false);
		RestTemplate restTemplate = new RestTemplate(requestFactory);
		HttpHeaders header = new HttpHeaders();
		
		long now = Instant.now().toEpochMilli();
		System.out.println("now:::::>>>"+now);
		log.info("now:::::>>>"+now);
		
		try {
			
			header.setContentType(MediaType.APPLICATION_JSON);
			
			//UAT clientId and scret Id
			//header.add("X-IBM-Client-Id", "1d3aa43c-753f-4ab7-b49c-e643bdc29af6");
			//header.add("X-IBM-Client-Secret", "X5tF5lQ5uR5fI4yP1pP6xX3aQ5jG4kJ6aM6nS3cE2tV8lO6iM1");
			
			//Production clientId and scret Id
			//header.add("X-IBM-Client-Id", "81dc74a811cc4e55ecf1cd4441a680b9"); //expired on 30/06/2023
			//header.add("X-IBM-Client-Secret", "337be639fdf10cb4fc60de724cb8ef31");
			
			//header.add("X-IBM-Client-Id", "2e6a7ce1acf10d03f4afccc70c3b67f1");
			//header.add("X-IBM-Client-Secret", "858abb76f90392660032ec19d4ceb55d");
			
			header.add("X-IBM-Client-Id", "4ca736822fb93404f8f220896f962e7b");
			header.add("X-IBM-Client-Secret", "0025fc7d0d7eba857596e35cda9b9623");
			
			header.add("x-fapi-epoch-millis", String.valueOf(now));
			header.add("x-fapi-channel-id", "BALIC");
			header.add("x-fapi-uuid", uniqueValue);
			header.add("AccessKey", "balic");
			
			HttpEntity<String> entity = new HttpEntity<>(encryptedRequestPayload,header);
			
			ResponseEntity<String> fileUploadResponse = restTemplate.postForEntity(APIConstants.DOCUPLOADURL, entity, String.class);
			
			System.out.println("fileUploadResponse::::::>>>>>" + fileUploadResponse.getBody());
			JSONObject jsonOjbect = new JSONObject(fileUploadResponse.getBody());
			String respPayload = (String) jsonOjbect.get("payload");
			System.out.println("respPayload:::::>>>>>"+respPayload);
			log.info("respPayload:::::>>>>>"+respPayload);
			String decryptedResp = AxisEncryptionDecryption.axisFileUploadDecryption(FileUploadStringConstants.BALIC_E2E_SECRET_KEY, respPayload);
			System.out.println("decryptedResp::::>>>>"+decryptedResp);
			log.info("decryptedResp::::>>>>"+decryptedResp);
			return decryptedResp;
			//return new ResponseEntity<Object>(decryptedResp, HttpStatus.OK);
			
		} catch (Exception ex) {
			System.out.println("Inside Exception of UploadDocs API Call"+ex.getMessage());
			log.info("Inside Exception of UploadDocs API Call"+ex.getMessage());
			ex.printStackTrace();
		}
		return null;
	}

	// Get the base64 from OMNI is consumed below API
	public static String getBase64String(String applNo, String docName) {
		System.out.println("applNo::::>>>"+applNo);
		log.info("applNo::::>>>"+applNo);
		System.out.println("docName::::>>>"+docName);
		log.info("docName::::>>>"+docName);
		String inputLine;
		try {
			URL url = new URL(APIConstants.getBase64Url + "?" + "ApplicationNo="+applNo+"&documentType="+docName+"");
			HttpURLConnection con = (HttpURLConnection) url.openConnection();
			con.setRequestMethod("GET");
			System.out.println("Response code of doc download api::::>>>" + con.getResponseCode());
			log.info("Response code of doc download api::::>>>" + con.getResponseCode());
			if (con.getResponseCode() == 200) {
				BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
				if ((inputLine = in.readLine()) != null) {
					// System.out.println(inputLine);
					return inputLine;
				} else {
					throw new RequestParamNotFoundException("InputLine Is getting null...!");
				}
			} else {
				throw new DocDownloadApiRespException(con.getResponseMessage() + "||" + con.getResponseCode());
			}
		} catch (Exception ex) {
			System.out.println("Inside The Exception getBase64 API"+ex.getMessage());
			log.info("Inside The Exception getBase64 API"+ex.getMessage());
			ex.printStackTrace();
		}
		return null;
	}



insert into customer.record_mgmt_logs(APPLN_NO, POLICY_NO, DOC_NAME, REQUEST, REQUEST_TIME, uuid, epoch)
select '12345','67891','abc.pdf','',sysdate,'507091596','1732199106966'
from dual
where azbj_sys_const_utils.get_char_val('RETAIL','AXIS_REC_MGMT_LOGS_FLAG') = 'Y'


<org.springframework.web.client.ResourceAccessException: I/O error on POST request for  sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target; nested exception is javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target> 

how to set "null" string in blob.setBytes(1, "");


Please share below mentioned details to understand the load taking capacity for the said API. Same need to be provided to AXIS Team.

Application is - https://webportal.bajajallianz.com/PartnerGrpWS/partner

1.	Production URL
2.	IP address
3.	Below information 
a.	Transaction per hour
b.	Transaction per minutes
c.	Transaction per day

Yesterday 707 cases got issued and today havenâ€™t received any requests of Issuance API. Can you please share the request and response of few cases logged at your side.


Please find the below mentioned required details.

1.	Production URL - https://webportal.bajajallianz.com/PartnerGrpWS/partner/partnerGroupAXISEnc/partnerGroupPremCalcAXISEnc
2.	IP address - 202.90.192.228 (Public Prod server IP address)
3.	Below information(Please note below mentioned stats is for the hits received on the existing prod application) 
a.	Transaction per hour - 1.54K(This count is for selected random 1hour might be hits can be more than given count depends how the API is consume at different time frames)
b.	Transaction per minutes â€“ (Highest Hits Per 10 Minutes during the day - 249)
c.	Transaction per day - 8.64k

Also please share if any other Prod IP whitelisting required at our side and approx. expected transactions per day.



FOR k IN 1 .. p_azbj_grp_result_list.COUNT
         LOOP
            IF (   p_azbj_grp_result_list (k).ERROR_DESCRIPTION LIKE
                      '%Memeber Already Proceesed%'
                OR p_azbj_grp_result_list (k).ERROR_DESCRIPTION IS NOT NULL)
            THEN
               UPDATE AZBJ_BFL_TDMC_UPLOAD_DETAIL
                  SET FLAG = 'E',
                      error_desc =
                         p_azbj_grp_result_list (k).ERROR_DESCRIPTION,
                      UPDATE_DATE = SYSDATE
                WHERE MEMERSHIP_NO = p_azbj_grp_result_list (k).MEMBERSHIP_NO;

               DELETE FROM AZBJ_TDMC_UPLOAD_DETAIL
                     WHERE     MEMERSHIP_NO =
                                  p_azbj_grp_result_list (k).MEMBERSHIP_NO
                           AND POLICY_REF IS NULL;

               DELETE FROM AZBJ_GRP_UPLOAD_DETAIL
                     WHERE     MEMBER_CODE =
                                  p_azbj_grp_result_list (k).MEMBERSHIP_NO
                           AND CERTIFICATE_POLICY_NO IS NULL;


               COMMIT;
            ELSE
               p_azbj_grp_result_list.DELETE;

               BEGIN
                  SELECT scheme_type
                    INTO V_SCHEME_TYPE
                    FROM azbj_grp_upload_detail
                   WHERE     master_policy_no =
                                p_upload_list (K).master_policy_no
                         --AND a.upload_date = p_upload_date
                         --AND a.upload_type = b.upload_type
                         AND record_status = 'CALCULATED'
                         AND member_code = p_upload_list (K).membership_no;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     V_SCHEME_TYPE:=NULL; -- REPLACED GSJS WITH NULL    
               END;
               
               IF V_SCHEME_TYPE IS NOT NULL THEN --ADDED THIS CONDITION FOR PROD ISSUE

                   BEGIN
                      SELECT LPAD (TO_CHAR (azbj_member_policy_seq.NEXTVAL),
                                   9,
                                   '0')
                        INTO v_certificate_seq
                        FROM DUAL;
                   EXCEPTION
                      WHEN OTHERS
                      THEN
                         v_certificate_seq := 0;
                   END;


                   v_certificate_policy_no :=
                      V_SCHEME_TYPE || '_' || v_certificate_seq;

                   UPDATE AZBJ_BFL_TDMC_UPLOAD_DETAIL
                      SET POLICY_REF = v_certificate_policy_no, FLAG = 'Y'
                    WHERE     MEMERSHIP_NO = p_upload_list (K).membership_no
                          AND FLAG = 'N';

                   UPDATE AZBJ_TDMC_UPLOAD_DETAIL
                      SET POLICY_REF = v_certificate_policy_no
                    WHERE     MEMERSHIP_NO = p_upload_list (K).membership_no
                          AND POLICY_REF IS NULL;

                   UPDATE AZBJ_GRP_UPLOAD_DETAIL
                      SET CERTIFICATE_POLICY_NO = v_certificate_policy_no
                    WHERE     MEMBER_CODE = p_upload_list (K).membership_no
                          AND CERTIFICATE_POLICY_NO IS NULL;

                   COMMIT;


                   BEGIN
                      SELECT ROUND (
                                  NVL (basic_life_cover_premium, 0)
                                + NVL (adb_premium, 0)
                                + NVL (tpd_ppd_premium, 0)
                                + NVL (illness_rider_premium, 0)
                                + NVL (accel_crit_illness_rider_prem, 0)
                                + NVL (service_tax_rate, 0),
                                0),
                             NVL (service_tax_rate, 0)
                        INTO v_prem_without_st, v_prem_st
                        FROM azbj_grp_upload_detail
                       WHERE     master_policy_no =
                                    p_upload_list (K).master_policy_no
                             AND member_code = p_upload_list (K).membership_no
                             AND upload_type IN ('NB', 'MA')
                             AND record_status IN ('CALCULATED');
                   EXCEPTION
                      WHEN OTHERS
                      THEN
                         v_prem_without_st := 0;
                         v_prem_st := 0;
                   END;

                   BEGIN
                      SELECT RISK_COVERAGE_START_DATE, RISK_COVERAGE_END_DATE
                        INTO V_RISK_COVERAGE_START_DATE, V_RISK_COVERAGE_END_DATE
                        FROM azbj_grp_upload_detail
                       WHERE     master_policy_no =
                                    p_upload_list (K).master_policy_no
                             AND member_code = p_upload_list (K).membership_no
                             AND upload_type IN ('NB', 'MA')
                             AND record_status IN ('CALCULATED');
                   EXCEPTION
                      WHEN OTHERS
                      THEN
                         V_RISK_COVERAGE_START_DATE := NULL;
                         V_RISK_COVERAGE_END_DATE := NULL;
                   END;

                   add_ws_result (p_upload_list (K).membership_no,
                                  p_upload_list (K).master_policy_no,
                                  NULL,
                                  v_batch_id,
                                  v_prem_without_st,
                                  v_prem_st,
                                  v_certificate_policy_no,
                                  'ISSUED',
                                  V_RISK_COVERAGE_START_DATE,
                                  V_RISK_COVERAGE_END_DATE);

                   RETURN;
               --ADDED ELSE FOR PROD ISSUE
               ELSE
                             V_error_desc :=
                             'Something went wrong, please try after some time';

                                add_ws_result (p_upload_list (i).membership_no,
                                      p_upload_list (i).master_policy_no,
                                      V_error_desc,
                                      v_batch_id,
                                      v_prem_without_st,
                                      v_prem_st,
                                      NULL,
                                      NULL,NULL,NULL);

                            RETURN;
                                    
               END IF;                   
            END IF;
         END LOOP;


DECLARE
   dummy    NUMBER := 5;
   dummy1   VARCHAR2 (10) := '8';
BEGIN
   DBMS_OUTPUT.put_line (CASE WHEN dummy = dummy1 THEN 'Y' ELSE 'N' END);
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('Error-' || SQLERRM);
END;
